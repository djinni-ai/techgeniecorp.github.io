(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[133],{8276:(e,t,l)=>{Promise.resolve().then(l.bind(l,4899))},4899:(e,t,l)=>{"use strict";l.r(t),l.d(t,{default:()=>a});var n=l(5155),o=l(9208);function r(){return(0,n.jsxs)("div",{className:"absolute top-0 left-0 w-full h-full bg-primary-bg",children:[(0,n.jsx)(o.Canvas,{className:"absolute top-0 left-0 w-full h-full opacity-[18%]"}),(0,n.jsx)("div",{className:"absolute top-0 left-0 w-full h-full bg-linear-[250deg] from-violet/20 to-transparent mix-blend-color to-80% xl:to-90%"}),(0,n.jsx)("div",{className:"absolute top-0 left-0 w-full h-[340px] bg-linear-to-b from-deep-violet/45 to-transparent"}),(0,n.jsx)("div",{className:"absolute top-0 left-0 w-full h-full bg-linear-[250deg] from-violet/40 to-transparent to-80% xl:to-90%"}),(0,n.jsx)("div",{className:"absolute top-0 left-0 w-full h-[120px] bg-linear-to-b from-deep-violet/75 to-transparent"})]})}function a(e){let{children:t}=e;return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("div",{className:"relative h-[314px] xl:h-[382px] pt-header shrink-0",children:[(0,n.jsx)(r,{}),(0,n.jsx)("div",{className:"absolute top-0 left-0 w-full h-[160px] bg-linear-to-b from-deep-violet/40 to-transparent"}),(0,n.jsx)("div",{className:"absolute bottom-0 left-0 w-full h-[160px] bg-linear-to-t from-deep-violet/40 to-transparent"})]}),(0,n.jsx)("div",{className:"bg-primary grow",children:(0,n.jsx)("div",{className:"page-grid -mt-[128px] xl:-mt-[172px] page",children:t})})]})}},9208:(e,t,l)=>{"use strict";l.d(t,{Canvas:()=>r});var n=l(5155),o=l(2115);function r(e){let{className:t,squareSize:r=12,gapSize:i=4,mobileSizeMultiplier:s=.75,blinkProbability:u=.25,freqRange:c=[.1,.3]}=e,f=(0,o.useRef)(null),d=(0,o.useRef)(null),[m,p]=(0,o.useState)(null);return(0,o.useEffect)(()=>{let{current:e}=f;if(e&&!m){let t=getComputedStyle(document.documentElement),n=t.getPropertyValue("--color-light-blue"),o=t.getPropertyValue("--color-website");l.e(814).then(l.bind(l,5814)).then(t=>{let{default:l}=t,r=new l(e);r.load("#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float u_time;\nuniform vec2 u_resolution;\nuniform vec3 u_color_background;\nuniform vec3 u_color_square;\nuniform float u_square_size;\nuniform float u_gap_size;\nuniform float u_blink_probability;\nuniform float u_min_flicker_freq;\nuniform float u_max_flicker_freq;\n\n// A simple hash function to generate a pseudo-random value from a 2D coordinate.\nfloat random(vec2 st, float seed) {\n  return fract(sin(dot(st, vec2(12.9898, 78.233) + seed)) * 43.758);\n}\n\nvoid main() {\n  // Get pixel coordinate with an origin at the top left corner of the canvas.\n  vec2 uv = vec2(gl_FragCoord.x, u_resolution.y - gl_FragCoord.y);\n\n  // Rotate the grid 45\xb0 around the top left corner of the canvas.\n  float angle = 3.14159 / 4.0;  // 45\xb0 in radians.\n  mat2 rot = mat2(cos(angle), -sin(angle),\n                sin(angle),  cos(angle));\n  uv = rot * uv;\n\n  float squareSize = u_square_size;\n  float cellSize = u_square_size + u_gap_size;\n  \n  // Determine which cell we're in and the local position within that cell.\n  vec2 cell = floor(uv / cellSize);\n  vec2 cellPos = mod(uv, cellSize);\n  \n  // If the current pixel is within the gap area, output the background color (black).\n  if(cellPos.x >= squareSize || cellPos.y >= squareSize) {\n    gl_FragColor = vec4(u_color_background, 1.0);\n    return;\n  }\n  \n  // Generate a random value for the cell.\n  float rnd = random(cell, 0.0);\n  // Set a frequency range for slow blinking: from 0.2Hz to 0.5Hz.\n  float freq = mix(u_min_flicker_freq, u_max_flicker_freq, rnd);\n  // Move the time randomly forward for each cell\n  float time = u_time + 123.456 * rnd;\n  // Compute a phase value that includes a random phase offset.\n  float phase = time * 2.0 * 3.14159 * freq + rnd * 6.28318;\n \n  // Compute an integer-like cycle count for the blink.\n  // This increases by 1 each blink cycle.\n  // Derive the cycle count from the phase (each full 2Ï€ period is one cycle).\n  float cycle = floor(phase / (2.0 * 3.14159));\n  \n  // Choose the target color based on the cycle.\n  bool isBrightCycle = (mod(cycle, 1.0 / u_blink_probability) < 1.0);\n  vec3 targetColor = isBrightCycle ? u_color_square : u_color_square / 2.0;\n\n  // Compute a smooth blink value that oscillates between 0.0 and 1.0.\n  // The sine wave is scaled and offset to yield a smooth transition.\n  float blink = sin(phase) * 0.5 + 0.5;\n\n  // Use the blink value to determine the color of the square.\n  vec3 color = mix(u_color_background, targetColor, blink);\n  gl_FragColor = vec4(color, 1.0);\n}\n"),r.setUniform("u_color_background",...a(o)),r.setUniform("u_color_square",...a(n)),r.play(),p(r)}).catch(e=>{console.error(e)})}return()=>{m&&m.destroy()}},[f,m]),(0,o.useEffect)(()=>{let e=getComputedStyle(document.documentElement).getPropertyValue("--breakpoint-xl");m&&(m.setUniform("u_min_flicker_freq",c[0]),m.setUniform("u_max_flicker_freq",c[1]),m.setUniform("u_blink_probability",u));let t=()=>{let t=window.innerWidth<parseInt(e.replace("px",""))?s:1;m&&(m.setUniform("u_square_size",r*t*window.devicePixelRatio),m.setUniform("u_gap_size",i*t*window.devicePixelRatio))};return window.addEventListener("resize",t),t(),()=>{window.removeEventListener("resize",t)}},[m,c,u,r,i,s]),(0,n.jsx)("div",{ref:d,className:t,children:(0,n.jsx)("canvas",{ref:f,className:m?"w-full h-full":""})})}function a(e){return[parseInt(e.slice(1,3),16)/255,parseInt(e.slice(3,5),16)/255,parseInt(e.slice(5,7),16)/255]}}},e=>{var t=t=>e(e.s=t);e.O(0,[441,517,358],()=>t(8276)),_N_E=e.O()}]);