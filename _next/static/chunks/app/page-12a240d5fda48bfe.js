(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[974],{6158:(e,n,t)=>{Promise.resolve().then(t.bind(t,9208)),Promise.resolve().then(t.bind(t,5575))},9208:(e,n,t)=>{"use strict";t.d(n,{Canvas:()=>r});var o=t(5155),l=t(2115);function r(e){let{className:n,squareSize:r=12,gapSize:a=4,blinkProbability:c=.25,freqRange:s=[.1,.3]}=e,u=(0,l.useRef)(null),f=(0,l.useRef)(null),[d,m]=(0,l.useState)(null);return(0,l.useEffect)(()=>{let{current:e}=u;if(e&&!d){let n=getComputedStyle(document.documentElement),o=n.getPropertyValue("--color-light-blue"),l=n.getPropertyValue("--color-website");t.e(814).then(t.bind(t,5814)).then(n=>{let{default:t}=n,r=new t(e);r.load("#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float u_time;\nuniform vec2 u_resolution;\nuniform vec3 u_color_background;\nuniform vec3 u_color_square;\nuniform float u_square_size;\nuniform float u_gap_size;\nuniform float u_blink_probability;\nuniform float u_min_flicker_freq;\nuniform float u_max_flicker_freq;\n\n// A simple hash function to generate a pseudo-random value from a 2D coordinate.\nfloat random(vec2 st, float seed) {\n  return fract(sin(dot(st, vec2(12.9898, 78.233) + seed)) * 43758.5453123);\n}\n\nvoid main() {\n  // Get pixel coordinate\n  vec2 uv = gl_FragCoord.xy;\n\n  // Rotate the grid 45\xb0 around the center of the canvas.\n  float angle = 3.14159 / 4.0;  // 45\xb0 in radians.\n  mat2 rot = mat2(cos(angle), -sin(angle),\n                sin(angle),  cos(angle));\n  vec2 center = u_resolution * 0.5;\n  uv = rot * (uv - center) + center;\n\n  // Each cell is 16px (12px square + 4px gap)\n  float cellSize = u_square_size + u_gap_size;\n  \n  // Determine which cell we're in and the local position within that cell.\n  vec2 cell = floor(uv / cellSize);\n  vec2 cellPos = mod(uv, cellSize);\n  \n  // If the current pixel is within the gap area, output the background color (black).\n  if(cellPos.x >= u_square_size || cellPos.y >= u_square_size) {\n    gl_FragColor = vec4(u_color_background, 1.0);\n    return;\n  }\n  \n  // Generate a random value for the cell.\n  float rnd = random(cell, 0.0);\n  // Set a frequency range for slow blinking: from 0.2Hz to 0.5Hz.\n  float freq = mix(u_min_flicker_freq, u_max_flicker_freq, rnd);\n  // Move the time randomly forward for each cell\n  float time = u_time + 100000.0 * rnd;\n  // Compute a phase value that includes a random phase offset.\n  float phase = time * 2.0 * 3.14159 * freq + rnd * 6.28318;\n \n  // Compute an integer-like cycle count for the blink.\n  // This increases by 1 each blink cycle.\n  // Derive the cycle count from the phase (each full 2Ï€ period is one cycle).\n  float cycle = floor(phase / (2.0 * 3.14159));\n  \n  // Choose the target color based on the cycle.\n  bool isBrightCycle = (mod(cycle, 1.0 / u_blink_probability) < 1.0);\n  vec3 targetColor = isBrightCycle ? u_color_square : u_color_square / 2.0;\n\n  // Compute a smooth blink value that oscillates between 0.0 and 1.0.\n  // The sine wave is scaled and offset to yield a smooth transition.\n  float blink = sin(phase) * 0.5 + 0.5;\n\n  // Use the blink value to determine the color of the square.\n  vec3 color = mix(u_color_background, targetColor, blink);\n  gl_FragColor = vec4(color, 1.0);\n}\n"),r.setUniform("u_color_background",...i(l)),r.setUniform("u_color_square",...i(o)),r.play(),m(r)}).catch(e=>{console.error(e)})}return()=>{d&&d.destroy()}},[u,d]),(0,l.useEffect)(()=>{d&&(d.setUniform("u_min_flicker_freq",s[0]),d.setUniform("u_max_flicker_freq",s[1]),d.setUniform("u_blink_probability",c),d.setUniform("u_square_size",r*window.devicePixelRatio),d.setUniform("u_gap_size",a*window.devicePixelRatio))},[d,s,c,r,a]),(0,o.jsx)("div",{ref:f,className:n,children:(0,o.jsx)("canvas",{ref:u,className:d?"w-full h-full":""})})}function i(e){return[parseInt(e.slice(1,3),16)/255,parseInt(e.slice(3,5),16)/255,parseInt(e.slice(5,7),16)/255]}},5575:(e,n,t)=>{"use strict";t.d(n,{default:()=>f});var o=t(5155);function l(e){let{size:n,tabletSize:t,mobileSize:l,style:s,enabled:u,children:f}=e,d=["button",u?"primary"===s?r.primary:r.secondary:r.disabled,function(e){let n=a[e];if(!n)throw Error("Invalid desktop size: ".concat(e));return n}(t),function(e){let n=i[e];if(!n)throw Error("Invalid mobile size: ".concat(e));return n}(l),function(e){let n=c[e];if(!n)throw Error("Invalid desktop size: ".concat(e));return n}(n)].join(" ");return(0,o.jsx)("span",{className:d,children:f})}let r={primary:"button-primary",secondary:"button-secondary",disabled:"button-disabled"},i={XS:"text-xs px-1 py-0",S:"text-sm px-2 py-1",M:"text-sm xl:leading-[20px] px-6 py-2.5",L:"text-lg px-6 py-3",XL:"text-xl px-8 py-4"},a={XS:"md:text-xs md:px-1 md:py-0",S:"md:text-sm md:px-2 md:py-1",M:"md:text-sm xl:leading-[20px] md:px-6 md:py-2.5",L:"md:text-md md:px-8 md:py-3",XL:"md:text-2xl md:px-16 md:py-5"},c={XS:"xl:text-xs xl:px-1 xl:py-0",S:"xl:text-sm xl:px-2 xl:py-1",M:"xl:text-sm xl:leading-[20px] xl:px-6 xl:py-2.5",L:"xl:text-md xl:px-8 xl:py-3",XL:"xl:text-2xl xl:px-16 xl:py-5"};t(2115);var s=t(8173),u=t.n(s);function f(e){let{type:n="button",onClick:t=()=>!0,href:r,size:i="M",tabletSize:a=i,mobileSize:c=a,style:s="primary",disabled:f=!1,className:m="",children:p}=e,x=r?u():d;if("button"!==n&&r)throw Error("Button with href must be of type='button'; got '".concat(n,"'"));return(0,o.jsx)("button",{type:n,disabled:f,className:"button-container ".concat(m),children:(0,o.jsx)(x,{href:r,onClick:t,children:(0,o.jsx)(l,{size:i,tabletSize:a,mobileSize:c,style:s,enabled:!f,children:p})})})}function d(e){let{children:n,onClick:t}=e;return(0,o.jsx)("span",{onClick:t,children:n})}}},e=>{var n=n=>e(e.s=n);e.O(0,[173,441,517,358],()=>n(6158)),_N_E=e.O()}]);